RUBY ON RAILS 
# .erb -- Embedded Ruby


IDE
RubyMine (Not free) - JetBrains - same same - Toray recommended
Aptana Studio 3
Vim - good for ruby and rails development with plugins 

STARTING AN APP

IN COMMAND PROMPT: (ENTER IN THIS ORDER)

GENERATE NEW RAILS APP
rails new SiteName (1)
# creates a new Rails app named SiteName

rails new myapp --database=postgresql
# creates a new Rails app with postgresql as default database (for heroku interfacing)

(good git repo practice)
cd SiteName # hop inside application director
git init #initial git repo INSIDE of application, not outside!
gid add . # add everything
git commit -m "initial commit" #commit everything

bundle install (2)
# Note: always cd into the SiteName prior to installing the gems.
# installs all the software packages, called gems, that are required by the new app.
# all files in app structure are automatically 'required' - no need to restate at the top of each file

rails server (3)
# starts the Rails development server so we could preview the app in browser by visiting http://localhost:3000,
# the development server called "WEBrick"
# defaults to localhost 3000

GENERATE CONTROLLER
rails generate controller Pages [action1 action2] (4) (PLURAL controller name - convention)
# generates a controller that is required for the request/response cycle
# "controller actions" - these are methods in Rails controllers (SINGULAR - convention)
# controller name "Pages" for static websites.
# controller is saved as js/app/controllers/pages_controller.rb in file structure
i.e. "Pages" <> "pages_controller.rb"

# actions must be added for EACH page that will exist
  def home; end;
  def about; end;

CREATE A ROUTE 
# save routes in "config/routes.rb"
get "welcome" => "pages#home" (5)
get "pagenameurl" => "controller#action_name"
# creates a route for when to send the requested http://localhost:8000/welcome to the "pages" controller: "home" action.
# maps a URL to the controller action.
e.g. "welcome" === "http://localhost:8000/welcome"
     "pages#home" === "js/app/controllers/pages_controller: def home; end."
# also take advantage of default:
# get 'greeter/hello' === get 'greeter/hell' (url) => "greeter#hello" (controller#action)


OR

root 'pages#home'
# route tells Rails to map requests for the url "/" to the Pages controller's "home" action.

create a view (6)

APPLICATION PREVIEW:
rails s -p 8080 -b 0.0.0.0 # view application in terminal
http://localhost:8080 in browser.

APPLICATION LAYOUT
app/views/layouts/application.html.erb
# base view that contains common elements for your site:
# this includes: CSS file links, the header and the footer:
	<%= yield %>
# the yield within the template yields to the child templates, such as home.html.erb and about.html.erb

CREATING A MODEL >>>

GENERATING A MODEL (1)
rails generate model Messsage (singular convention - each instance refers to one row in DB)
# required for data input rubies application
# https://www.codecademy.com/articles/request-response-cycle-dynamic # view for Request/Response Data Cycle
# this does two things:
# 1. Generates a model file in app/models/message.rb. The model represents a table in the database.
# 2. Generates a migration file in db/migrate/. Migrations are a way to update the database. 

EDIT MIGRATIONS FOR MODELS (2)
# "change" METHOD tells Rails what changes to make to the database.
# "create_table" COMMAND WITHIN METHOD creates a new table in database for storing mesages.
# "t.text :content" COMMAND WITHIN METHOD. Will create text column called content in messages table.
# "t.timestamps" COMMAND WITHIN METHOD. Create two further columns in messages table. a "created_at" and "updated_at"
# "t.references :tag" COMMAND WITHIN METHOD. Creates a "foreign key" pointing to "tag"s given table.
# (these are automatically updated)

UPDATED DATABASE (3)
rake db:migrate
# updates database with new messages data model.

SEED SAMPLE DATA IN DATABASE (4)
rake db:seed
# seeds database with sample data from db/seeds.rb
# use this to seed the database with default values.

STANDARD CONTROLLER ACTIONS FOR DATA MANIPULATION (5)

resources :controller_name

#convention plural

(resources :users)
# in routes.rb file.
# 7 USEFUL DATA ACTIONS: index, show, new, create, edit, update, and destroy
# suite of controller actions and associated routes, to pre-poulate
# https://www.codecademy.com/articles/standard-controller-actions
# https://www.codecademy.com/courses/learn-rails/lessons/one-model/exercises/one-model-view?action=lesson_resume

HTTP request	URL		Action	Purpose
GET		/users		index	page to list all users
GET		/users/1	show	page to show user with id 1
GET		/users/new	new	page to make a new user
POST		/users		create	create a new user
GET		/users/1/edit	edit	page to edit user with id 1
PATCH		/users/1	update	update user with id 1
DELETE		/users/1	destroy	delete user with id 1


rake routes 
# used to view created routes.

# get '/tags/:id' => 'tags#show', as: :tag
# use of "as:" to name this given route "tag"

e.g.
routes.rb file:
get "messages" => "messages/index"

USEFUL CONTROLLER ACTIONS

def index
  @messages = Message.all
end
def new
    @message = Message.new
  end

private 
  def message_params 
    params.require(:message).permit(:content) 
  end

# "http://localhost:8000/messages" : controller maps URS request to message controller's index action.
# "index" action created to save all messages in local variable. This to be passed on to viewer.
# "new" action created in messages controller. 

INTERROGATING DATABASES

1. Start new consold
2. cd rails-app
3. rails console
4. Model.all

VIEW ALL NEW URLs CREATED BY {e.g. resources :Signup)
 routes

form_for

Use this in erb html to make ease of formfor.


HTTP request methods:

GET - Requests data from a specified resource
POST - Submits data to be processed to a specified resource

ADD COLUMNS TO TABLES

1. rails generate model Name (generates table called name)
2. open migrate file in /db
3. add t.type :name (e.g. t.string :username)
4. Run migration to update database with Name model.

## START THE RAILS CONSOLE ##

rails console

Use this to interrogate the application: 

User.all
## retrieves all signed-up users.

> User.create(first_name: "Edna", last_name: "Mode", email: 'edna@example.com', password: 'incredibles')
## manually adds a user through the console, rather than a PUT request from the interface.

> myuser = User.find_by(first_name: "David")
## finds user in database

> myuser.name 
## retrieves object property "name" or "email" etc

> myuser.save
## saves user details

> myuser.authenticate("password") 
## compares entered "password" with 'bcrypt' encrypted password. If incorrect, returns false. 
## if correct, returns full myuser object details.

http://guides.rubyonrails.org/active_record_basics.html#read 
## for library of 'active record basics' to put into the console.



##BASIC RAILS SETUP##

1. Setup
2. Add a model
3. Add a controller (same name) and routes
4. Add controller actions and views
5. Check the database

ASSOCIATIONS

1. Create two models "Tag" and "Destinations" 
2. Add methods to define associations within each:

One-to-many relationship defined with "has many / belongs_to" tags
// 3. "has_many :destinations" (Tag model) denotes that a single Tag can have multiple destinations.
// 4. "belongs_to :tag" (Destinations model) denotes that each Destination belongs to a single tag.
// e.g. library has many Books (one to many). a book belongs to a library (many to one)
//      album has many photos (one to many). a photo belongs to an album (many to one)
//      store has many products (one to many). a product belongs to a store (many to one) 

3. Customise models
// include new "t.type :name" columns to given :tag and :destinations as required.
// "t.references :tag" includes a "foreign key" pointing to given table. (THIS IS REQUIRED WITH BELONGS_TO)

USE FOR INPUT PARAMETERS FROM CLICKED ON OBJECT

  def edit
    @destination = Destination.find(params[:id])
    @keyplaces = @destination.keyplaces
  end

// takes :id from clicked on object

## MANY TO MANY ASSOCIATIONS ##

## MODEL SETUPS - set up this way to map a many to many relationship with these 3x models

class Actor
	has_many :parts
	has_many :movies, through: :parts
end

class Movie
	has_many :parts
	has_many :movies, through: :parts
end

class Part
	belongs_to :movie
	belongs_to :actor
end

DEPLOY RAILS APP TO INTERNET

https://www.codecademy.com/articles/deploy-rails-to-heroku

MAPPING DOMAINS FOR LAUNCH

https://www.codecademy.com/articles/map-a-custom-domain 

## AUTHENTICATION ##

Creating authentication 
1. Create model "User"
2. Add method "has_secure_password" to "User" model: Adds functionality to save passwords securely.
3. Add "bcrypt" gem to the Gemfile. This is an algorithm used to save passwords securely. This can probably be uncommented.
4. Generate "Users" Controller.
5. Create Sign-up form using Embedded Ruby / map route.
6. Take in User entered parameters in User Controller:

private
  def user_params
    params.require(:user).permit(:first_name, :last_name, :email, :password)
  end

7. Add the create action

def create 
  @user = User.new(user_params) 
  if @user.save 
    session[:user_id] = @user.id 
    redirect_to '/' 
  else 
    redirect_to '/signup' 
  end 
end

## NOTE: "session[:user_id] = @user.id" creates a new session.
## sessions are stored in key-value pairs where the value @user.id is mapped to the key :user_id

## LOGIN AUTHENTICATION FORM (WITH CONTROLLER SESSION)##

1. Generate Sessions Controller
2. Create route that maps "login" URL to session's new controller
3. Create login form in relevant view:

      <%= form_for(:session, url: login_path) do |f| %> 
  	<%= f.email_field :email, :placeholder => "Email" %> 
  	<%= f.password_field :password, :placeholder => "Password" %> 
  	<%= f.submit "Log in", class: "btn-submit" %>
      <% end %>

## NOTE: In the login form, we use form_for(:session, url: login_path) do |f|. 
## This refers to the name of the resource and corresponding URL

4. Create post route to create method:

post 'login' => 'sessions#create'

5. Define Create method:

def create
  @user = User.find_by_email(params[:session][:email])
  if @user && @user.authenticate(params[:session][:password])
    session[:user_id] = @user.id
    redirect_to '/'
  else
    redirect_to 'login'
  end 
end


## LOGOUT PROCEDURE ##

1. Add route: delete "logout" => "sessions#destroy"
2. Add destroy action to sessions controller:

def destroy 
  session[:user_id] = nil 
  redirect_to '/' 
end

## RAILS THEORY ##

CONVENTION OVER CONFIGURATION
# By using conventions, a lot of code is auto-generated
# less time coding!

Controller 


CategoryController < ApplicationController < ActionController::Base
# ApplicationController: Application specific controller
# ActionController::Base:  to manipulate model objects, filter inbound HTTP requests, and render views as HTML

# contains actions (Ruby Methods) that ORCHESTRATE WEB RQUESTS
# Rails generated
# create instance variables here @name, @time etc.
# these are then maxe available in the view

Actions (Methods)
# if the action in empty, does NOT needto be there
# as long as:
# -- 1. there is a proper route defined
# -- 2. a properly named view file/template
# the action method does not have to be there. Rails will find the correct template by 'Convention'
# INSTANCE VARIABLES : Note, cannot store variables in between requests. i.e. New request = new instance of method.
## Alternatives: store in sessions or databases.


Routes
# 1. automatically generated in "Rails generate controller" command OR
# 2. specified MANUALLY in the 'config/routes.rb' file

View
# uses embedded ruby where rquired.
# MINIMISE business logic as much as possible in view: abstract into controller 

PROCESS
1. URL Request set from user
2. Router routes request to controller.
3. Controller <=> Model <=> DB (as rqd)
4. Controller invokes view
5. Views renders data

## RAKE ##
# ruby's 'build' language (ant (?) from java, make from C)
# Ruby's make ie. R+ake
# no XML - written entirely in Ruby!
# used to "automate app-related tasks". e.g. database, running tests, etc.

rake --tasks
# see all of the rake tasks that application supports

db:create # known as a name space

rake --describe task_name
# describes the specific rake task name

HELPERS
# Stored in 'helpers' folder. Reuseable
# collection of methods accessible to ALL views: not just name matched controller/view/helper
# store how to format a variable:- controller for raw data - is specific view loses reuseablilty!


link_to name, path
# hyperlink generator that displays the name and links to the path
# path -
# 1. regular string OR
# 2. route defined in the routes.rb file ending with _url (full path) or _path (relative path)
#_url and _path used interchangeably. use _url in case of redirection (?)
# e.g.
# link_to "Action", controller_action_prefix_path #prefix as listed by rake routes

## GEM ##
# package manager for Ruby that comes preinstalled.

gem install gem_name
# installs new gem gem_name from rubygem.org website

gem list gem_name -d
# see whether gem is installed locally
# -d for details

RESTful Web Services (REpresentational State Transfer)
# simple web services implement ussing HTTP (and principles of REST) that:
# 1. have a base URI (Uniform Resource Identifier)
# 2. Support a data exchange format (XML, JSON etc.)
# 3. Support a set of HTTP operations (Get, POST etc.)

HTTPARTY RUBY GEM
# specific ruby gem
# RESTful web services CLIENT
# automatic parsing of JSON and XML into Ruby hashes! from web based data
# provides support for:
# -- authentication.
# -- default request query parameters

HTTParty USAGE
(1) include HTTPary #ready to go
(2) Can specify:
base_uri       # for requests
default_params # API developer key for example
format         # format to tell it which format the data is in (JSON, html, etc)

e.g. URI requests: URL?PARAMETER&PARAMETER
e.g.www.coursera.org/api/.catalogue.v1/courses?fields=...&q=...

## BUNDLERS ##

# bundler.io
# provides a consistent environment for Ruby projects - tracking and installing the exact gems and versions that are needed. i.e.
# manages gem dependencies
# loads gems on applciation startup. 

(1) user specifies gems in 'Gemfile' in ROOT of your rails app
(2) bundler manages the gem dependencies from within this app.

bundle install / bundle
# install bundle of gems required. OR
# update bundle of gems installed

bundle install --without production
# special flag to ensure no production gems are installed right now
# specific application: not install postgresql 'pg' production gem for compatibility with heroku

bundle update
# update existing versions of gems
# always run after installing new gems (particular big packages like rails) / lets bundler insure compatibility

bunde info [gemname]
# find where bundle is installed

group :development, :test do 
# these gems will only be available in 'development' and 'test' environment
  gem 'byebug'
  gem 'web-console', '~> 2.0'
  gem 'spring'
end

gem "nokogiri"  		# latest version gem
gem "rails", "3.0.0.beta3" 	# exact version
gem "rack", ">=1.0"		# lower and upper bounds, when backwards compatibility is not supported by later 					versions
gem "thin", "~>1.1"		# 'pessimistic version constraint' - finds upper limit before v1.1 for instance

Gemfile.lock 
# contains actual gem versions your app is using with their associated dependencies.

Gemfile
# (1) add extra gems here e.g. gem 'httparty', '0.13.5 ('gem_name', 'v.er.sion')
# (2) bundle / bundle install to install any added gems

bundle exec (rake/ rails etc)
# ensures gem version AS DETERMINED in gemfile.lock of application, rather than any other version.

params 
# Hash used to retrieve the value
# parses name of parameters, becomes a symbol/key in the hash
# eg. params [:looking_for]


## RUBY ON RAILS TUTORIALS (RAILS 5) ##

"User Resource"
# user as an object that can be created, read, updated and deleted 
# through web via the HTTP protocol

SCAFFOLDING

#naming convention: singular

1. rails generate scaffold User name:string # generate 'user' resource (singular by convention)
2. rails db:migrate 			    # first migrate the model to the database

rails generate scaffold User name:string email:string
# pass "scaoffold" to the rails  generate script
# "User" naming convention is singular version of the resource name
# parameters for object model are handed in "name:type name2:type"
# note: ID is generated automatically

rails db:migrate (NOTE rake db:migrate in Version 4-)
# update the database with our new ('User') data model

rake test (aso version 4-)
# run the automated test suite

rails server -b $IP -p $PORT
# run the rails server on $IP at port $PORT
# rails server will run locally!

ACTIVE RECORD

# Active Record is M in MVC (Model, View, Controller)

ORM - Object Relational Mapping
# Connects rich objects of an application to tables in a relational database management system.
# easily stored and retrieved from DB without writing SQL statements directly, less DB access code


MODELS 

# naming convention: sinular

class ModelName < ApplicationRecord <ActiveRecord::Base
# inheritance from A::B adds ability to communicate with the database, 
# treat the database columns as Ruby attributes, and so on

validates :content, length: { maximum: 140 }, presence: true
# adds a validation (length) of a column ( :content) by characters { maximum: 140}
# presence adds validation to check that content is non-empty
# apply in model



class User < ApplicationRecord
  has_many :microposts	# plural for has_many
end
# allows for 1:many relations between data models.

class Micropost < ApplicationRecord
  belongs_to :user 	# singular
# allows for 1:manyu relations between data models.
end

CONSOLE INTERACTIONS

rails console (ctrl+D)
# initiates the console
exit 
# exits console

ClassName.first
# returns first row in BD of model ClassName

ClassName.all
# returns all row in DB of model ClassName

ClassName.first.Microposts.first
# can link to get associated DB rows / filter for specific users






